<% if flash[:errors] %>
	<% flash[:errors].each do |error| %>
  	<div class='error'><p class='warning'><%= error %></p></div>
  <% end %>
<% end %>

<div class='box'>
	<h1>Attempting: <%= @record.title %></h1>

	<video muted autoplay id='video'></video>
	<button id='record'>Record</button>
	<button id='stop'>Stop</button>

	<div id='editBox'>
		<button id='startTimer'>Start Timestamp</button>
		<button id='stopTimer'>Stop Timestamp</button>
		<h1 id='time'>0:0:0</h1>
	</div>
	

	<%= form_tag('/attempt', method: 'post') do %>
		<input type='hidden' name='record_id' value='<%= @record.id %>'>
	  <input type='hidden' name='video_string' id='videoString'>
		<input type='button' value='Reset' id='reset' style='visibility: hidden;'/>
		<br>
		<input type='submit' id='submit'/>
	<% end %>
</div>

<script>
	var errorCallback = function(e) {
    console.log('Rejected!', e);
  };

	let video = document.getElementById('video');
  let record = document.getElementById('record');
  let stop = document.getElementById('stop');
  let reset = document.getElementById('reset');
  let videoString = document.getElementById('videoString');
  let submit = document.getElementById('submit');
  let startTimer = document.getElementById('startTimer');
  let time = document.getElementById('time');
  let editBox = document.getElementById('editBox');
  let timeObj = [0, 0, 0];
  let timerIntervalId;
  var blob;

  let chunks = [];

	navigator.getUserMedia  = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;

	if (navigator.getUserMedia) {
	  navigator.getUserMedia({audio: false, video: true}, function(stream) {
	    video.src = window.URL.createObjectURL(stream);

	    var mediaRecorder = new MediaRecorder(stream);

	    record.onclick = function() {
	      mediaRecorder.start();
	      record.style.background = "red";
	    };

	    stop.onclick = function() {
	      mediaRecorder.stop();
	      record.style.background = "";
	    };

	    startTimer.onclick = function () {
				timerIntervalId = setInterval(function() {
					++timeObj[0];
					if (timeObj[0] == 10) {
						timeObj[0] = 0;
						++timeObj[1];
						if (timeObj[1] == 60) {
							timeObj[1] = 0;
							++timeObj[2];
						}
					}
					time.innerHTML = timeObj[2] + ':' + timeObj[1] + ':' + timeObj[0];
				}, 100);
	    };

	    stopTimer.onclick = function() {
	    	clearInterval(timerIntervalId);
	    };

	    mediaRecorder.onstop = function(e) {

	      blob = new Blob(chunks, { 'type' : 'video/mp4; codecs=avc1.42E01E' });
	      chunks = [];

	      video.src = URL.createObjectURL(blob);
	      video.controls = true;
	      editBox.style.display = 'block';
	      reset.style.visibility = 'visible';

	      var reader = new FileReader();

	      reader.onload = function(event){
	      	videoString.value = event.target.result;
				};

	      reader.readAsDataURL(blob);

	      reset.onclick = function () {
	      	videoString.value = '';
	      	video.src = window.URL.createObjectURL(stream);
	      	editBox.style.display = 'none';
	      	reset.style.visibility = 'hidden';
	      	video.controls = false;
	      };
	    }

	    mediaRecorder.ondataavailable = function(e) {
	      chunks.push(e.data);
	    };

	  }, errorCallback);
	} else {

	}
</script>